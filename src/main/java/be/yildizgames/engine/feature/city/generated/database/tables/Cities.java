/*
 * This file is generated by jOOQ.
*/
package be.yildizgames.engine.feature.city.generated.database.tables;


import be.yildizgames.engine.feature.city.generated.database.Indexes;
import be.yildizgames.engine.feature.city.generated.database.Keys;
import be.yildizgames.engine.feature.city.generated.database.Public;
import be.yildizgames.engine.feature.city.generated.database.tables.records.CitiesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cities extends TableImpl<CitiesRecord> {

    private static final long serialVersionUID = -242612427;

    /**
     * The reference instance of <code>PUBLIC.CITIES</code>
     */
    public static final Cities CITIES = new Cities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CitiesRecord> getRecordType() {
        return CitiesRecord.class;
    }

    /**
     * The column <code>PUBLIC.CITIES.CIT_ID</code>.
     */
    public final TableField<CitiesRecord, Integer> CIT_ID = createField("CIT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CITIES.ENT_ID</code>.
     */
    public final TableField<CitiesRecord, Integer> ENT_ID = createField("ENT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.CITIES.NAME</code>.
     */
    public final TableField<CitiesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.CITIES</code> table reference
     */
    public Cities() {
        this(DSL.name("CITIES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CITIES</code> table reference
     */
    public Cities(String alias) {
        this(DSL.name(alias), CITIES);
    }

    /**
     * Create an aliased <code>PUBLIC.CITIES</code> table reference
     */
    public Cities(Name alias) {
        this(alias, CITIES);
    }

    private Cities(Name alias, Table<CitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cities(Name alias, Table<CitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CitiesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CITIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CitiesRecord> getPrimaryKey() {
        return Keys.PK_CITIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<CitiesRecord>>asList(Keys.PK_CITIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cities as(String alias) {
        return new Cities(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cities as(Name alias) {
        return new Cities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(String name) {
        return new Cities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(Name name) {
        return new Cities(name, null);
    }
}
